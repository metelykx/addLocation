import logging
import json
import os
from datetime import datetime
from telegram import Update, InputMediaPhoto, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7477798413:AAH0hRlFEEWCtrxqwKeHYifaGlhS-j5jCLY"
ADMIN_LOGIN = "putevod-admin"
ADMIN_PASSWORD = "Jingle2018"
ATTRACTIONS_FILE = "attractions.json"
SESSIONS_FILE = "sessions.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
LOGIN, PASSWORD, NAME, DESCRIPTION, LOCATION, PHOTOS = range(6)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
authorized_users = set()
temp_data = {}
attractions = {}
sessions = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
continue_keyboard = ReplyKeyboardMarkup(
    [["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"]],
    resize_keyboard=True,
    one_time_keyboard=True
)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
def init_storage():
    global attractions, sessions

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    if os.path.exists(ATTRACTIONS_FILE):
        try:
            with open(ATTRACTIONS_FILE, 'r', encoding='utf-8') as f:
                attractions = json.load(f)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ attractions.json: {e}")
            attractions = {}
    else:
        attractions = {}

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
    if os.path.exists(SESSIONS_FILE):
        try:
            with open(SESSIONS_FILE, 'r', encoding='utf-8') as f:
                sessions = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –≤ int (JSON —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä–µ–π –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
                sessions = {int(k): v for k, v in sessions.items()}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ sessions.json: {e}")
            sessions = {}
    else:
        sessions = {}

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    current_time = datetime.now().timestamp()
    for chat_id, expires_at in list(sessions.items()):
        if expires_at > current_time:
            authorized_users.add(chat_id)
        else:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            del sessions[chat_id]

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    save_sessions()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def save_attraction(name, description, latitude, longitude, photos):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    if name in attractions:
        return False

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    attractions[name] = {
        "description": description,
        "latitude": latitude,
        "longitude": longitude,
        "photos": photos,
        "created_at": datetime.now().isoformat()
    }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    try:
        with open(ATTRACTIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(attractions, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def save_session(chat_id):
    # –°–µ—Å—Å–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 30 –¥–Ω–µ–π
    sessions[chat_id] = datetime.now().timestamp() + 30 * 24 * 3600
    save_sessions()


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –≤ —Ñ–∞–π–ª
def save_sessions():
    try:
        with open(SESSIONS_FILE, 'w', encoding='utf-8') as f:
            json.dump(sessions, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_authorized(chat_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏
    if chat_id in sessions:
        if sessions[chat_id] < datetime.now().timestamp():
            # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞
            del sessions[chat_id]
            if chat_id in authorized_users:
                authorized_users.remove(chat_id)
            save_sessions()
            return False
        return True
    return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_storage()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id

    if is_authorized(chat_id):
        await update.message.reply_text(
            "üîì –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME

    await update.message.reply_text(
        "üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏!\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
        reply_markup=ReplyKeyboardRemove()
    )
    return LOGIN


async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text
    if user_input == ADMIN_LOGIN:
        temp_data[update.effective_chat.id] = {}
        await update.message.reply_text("‚úÖ –õ–æ–≥–∏–Ω –≤–µ—Ä–Ω—ã–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        return PASSWORD
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return LOGIN


async def password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    user_input = update.message.text

    if user_input == ADMIN_PASSWORD:
        authorized_users.add(chat_id)
        save_session(chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é

        await update.message.reply_text(
            "üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return PASSWORD


async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    temp_data[chat_id] = {"name": update.message.text}
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    return DESCRIPTION


async def description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    temp_data[chat_id]["description"] = update.message.text
    await update.message.reply_text(
        "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<i>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</i>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>55.755826, 37.617300</code>",
        parse_mode="HTML"
    )
    return LOCATION


async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    user_input = update.message.text

    try:
        lat, lon = map(str.strip, user_input.split(','))
        lat = float(lat)
        lon = float(lon)

        if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

        temp_data[chat_id]["location"] = (lat, lon)
        await update.message.reply_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 2-3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º):"
        )
        return PHOTOS

    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<i>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</i>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>55.755826, 37.617300</code>",
            parse_mode="HTML"
        )
        return LOCATION


async def photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    photos = update.message.photo

    if not photos:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        return PHOTOS

    file_ids = [photo.file_id for photo in photos[:3]]
    name = temp_data[chat_id]["name"]
    description = temp_data[chat_id]["description"]
    lat, lon = temp_data[chat_id]["location"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    success = save_attraction(name, description, lat, lon, file_ids)

    if not success:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=continue_keyboard
        )
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    media_group = [InputMediaPhoto(file_id) for file_id in file_ids]
    await context.bot.send_media_group(chat_id=chat_id, media=media_group)

    await update.message.reply_text(
        f"‚úÖ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
        f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat:.6f}, {lon:.6f}\n\n"
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",
        parse_mode="HTML",
        reply_markup=continue_keyboard
    )

    if chat_id in temp_data:
        del temp_data[chat_id]

    return ConversationHandler.END


async def continue_adding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if is_authorized(update.effective_chat.id):
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME
    else:
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    if chat_id in temp_data:
        del temp_data[chat_id]
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id

    # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
    if chat_id in authorized_users:
        authorized_users.remove(chat_id)

    # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    if chat_id in sessions:
        del sessions[chat_id]
        save_sessions()

    if chat_id in temp_data:
        del temp_data[chat_id]

    await update.message.reply_text(
        "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )


def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.Regex(r'^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ$'), continue_adding)
        ],
        states={
            LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
            PHOTOS: [MessageHandler(filters.PHOTO, photos)]
        },
        fallbacks=[
            CommandHandler('cancel', cancel),
            CommandHandler('logout', logout)
        ],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("logout", logout))

    application.add_handler(MessageHandler(
        filters.Regex(r'^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ$'),
        continue_adding
    ))

    application.run_polling()


if __name__ == '__main__':
    main()