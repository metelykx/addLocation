import logging
import os
import sys
from datetime import datetime
from telegram import Update, InputMediaPhoto, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from telegram.error import NetworkError, TimedOut, TelegramError
from db_config import init_db_pool, check_landmark_exists, save_landmark, save_photo
from dotenv import load_dotenv
import asyncio
import traceback
import httpx
from telegram.request import HTTPXRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_LOGIN = os.getenv('ADMIN_LOGIN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
PROXY_URL = os.getenv('PROXY_URL')  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–∫—Å–∏

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([BOT_TOKEN, ADMIN_LOGIN, ADMIN_PASSWORD]):
    logger.error("Missing required environment variables. Please check your .env file.")
    raise ValueError("Missing required environment variables. Please check your .env file.")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    LOGIN, PASSWORD,
    NAME, ADDRESS, CATEGORY,
    DESCRIPTION, HISTORY,
    LOCATION, PHOTOS, IMAGE_NAME
) = range(10)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
authorized_users = set()
temp_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
continue_keyboard = ReplyKeyboardMarkup(
    [["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
categories_keyboard = ReplyKeyboardMarkup(
    [
        ["–ó–∞–º–∫–∏", "–†–µ–ª–∏–≥–∏—è"],
        ["–ú—É–∑–µ–π", "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"],
        ["–ü–∞–º—è—Ç–Ω–∏–∫", "–ü–∞—Ä–∫"],
        ["–ü—Ä–∏—Ä–æ–¥–∞", "–¢–µ–∞—Ç—Ä"],
        ["–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–π –∑–∞–ª", "–ù–µ–æ–±—ã—á–Ω–æ–µ"],
        ["–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è", "–ê—Ä—Ç-–æ–±—ä–µ–∫—Ç"],
        ["–§–æ–Ω—Ç–∞–Ω", "–ù–∞—É–∫–∞"]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors in the telegram bot."""
    logger.error("Exception while handling an update:", exc_info=context.error)

    if isinstance(context.error, NetworkError):
        logger.error("Network error occurred. Will retry automatically.")
    elif isinstance(context.error, TimedOut):
        logger.error("Request timed out. Will retry automatically.")
    else:
        logger.error(f"Update {update} caused error {context.error}")
        logger.error(traceback.format_exc())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id

        if is_authorized(chat_id):
            await update.message.reply_text(
                "üîì –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return NAME

        await update.message.reply_text(
            "üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏!\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:",
            reply_markup=ReplyKeyboardRemove()
        )
        return LOGIN
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_input = update.message.text
        if user_input == ADMIN_LOGIN:
            temp_data[update.effective_chat.id] = {}
            await update.message.reply_text("‚úÖ –õ–æ–≥–∏–Ω –≤–µ—Ä–Ω—ã–π. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
            return PASSWORD
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return LOGIN
    except Exception as e:
        logger.error(f"Error in login handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        user_input = update.message.text

        if user_input == ADMIN_PASSWORD:
            authorized_users.add(chat_id)
            await update.message.reply_text(
                "üîì –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return NAME
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return PASSWORD
    except Exception as e:
        logger.error(f"Error in password handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        name = update.message.text

        if check_landmark_exists(name):
            await update.message.reply_text(
                f"‚ùå –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=continue_keyboard
            )
            return ConversationHandler.END

        temp_data[chat_id] = {"name": name}
        await update.message.reply_text("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        return ADDRESS
    except Exception as e:
        logger.error(f"Error in name handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        temp_data[chat_id]["address"] = update.message.text
        await update.message.reply_text(
            "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=categories_keyboard
        )
        return CATEGORY
    except Exception as e:
        logger.error(f"Error in address handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        temp_data[chat_id]["category"] = update.message.text
        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        return DESCRIPTION
    except Exception as e:
        logger.error(f"Error in category handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        temp_data[chat_id]["description"] = update.message.text
        await update.message.reply_text("üìú –í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Å–ø—Ä–∞–≤–∫—É:")
        return HISTORY
    except Exception as e:
        logger.error(f"Error in description handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        temp_data[chat_id]["history"] = update.message.text
        await update.message.reply_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<i>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</i>\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>44.511777, 34.233452</code>",
            parse_mode="HTML"
        )
        return LOCATION
    except Exception as e:
        logger.error(f"Error in history handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        user_input = update.message.text

        try:
            lat, lon = map(str.strip, user_input.split(','))
            lat = float(lat)
            lon = float(lon)

            if not (-90 <= lat <= 90) or not (-180 <= lon <= 180):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

            temp_data[chat_id]["location"] = (lat, lon)
            await update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
            )
            return PHOTOS

        except (ValueError, IndexError):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "<i>—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞</i>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>44.511777, 34.233452</code>",
                parse_mode="HTML"
            )
            return LOCATION
    except Exception as e:
        logger.error(f"Error in location handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        photos = update.message.photo

        if not photos:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
            return PHOTOS

        # Get the highest quality photo
        photo = max(photos, key=lambda x: x.file_size)
        temp_data[chat_id]["photo"] = photo.file_id

        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: landmark_photo.jpg):"
        )
        return IMAGE_NAME
    except Exception as e:
        logger.error(f"Error in photos handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def image_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        images_name = update.message.text

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = temp_data[chat_id]
        name = data["name"]
        address = data["address"]
        category = data["category"]
        description = data["description"]
        history = data["history"]
        lat, lon = data["location"]
        photo_file_id = data["photo"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        if not await save_photo(context.bot, photo_file_id, images_name):
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=continue_keyboard
            )
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = save_landmark(
            name=name,
            address=address,
            category=category,
            description=description,
            history=history,
            latitude=lat,
            longitude=lon,
            images_name=images_name
        )

        if not success:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=continue_keyboard
            )
            return ConversationHandler.END

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await context.bot.send_photo(chat_id=chat_id, photo=photo_file_id)

        await update.message.reply_text(
            f"‚úÖ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–ò—Å—Ç–æ—Ä–∏—è:</b> {history}\n"
            f"<b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat:.6f}, {lon:.6f}\n"
            f"<b>–ò–º—è —Ñ–∞–π–ª–∞:</b> {images_name}\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",
            parse_mode="HTML",
            reply_markup=continue_keyboard
        )

        if chat_id in temp_data:
            del temp_data[chat_id]

        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in image_name handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def continue_adding(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        if is_authorized(update.effective_chat.id):
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return NAME
        else:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in continue_adding handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        chat_id = update.effective_chat.id
        if chat_id in temp_data:
            del temp_data[chat_id]
        await update.message.reply_text(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in cancel handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return ConversationHandler.END

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        chat_id = update.effective_chat.id
        if chat_id in authorized_users:
            authorized_users.remove(chat_id)
        if chat_id in temp_data:
            del temp_data[chat_id]
        await update.message.reply_text(
            "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"Error in logout handler: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

def is_authorized(chat_id):
    return chat_id in authorized_users

def main() -> None:
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        init_db_pool()
        logging.info("Database connection initialized successfully")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if PROXY_URL:
            logger.info(f"Using proxy: {PROXY_URL}")
            request = HTTPXRequest(
                connection_pool_size=8,
                proxy_url=PROXY_URL,
                read_timeout=30.0,
                write_timeout=30.0,
                connect_timeout=30.0,
                pool_timeout=30.0
            )
        else:
            logger.info("No proxy configured, using direct connection")
            request = HTTPXRequest(
                connection_pool_size=8,
                read_timeout=30.0,
                write_timeout=30.0,
                connect_timeout=30.0,
                pool_timeout=30.0
            )

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏
        application = (
            Application.builder()
            .token(BOT_TOKEN)
            .request(request)
            .build()
        )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                MessageHandler(filters.Regex(r'^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ$'), continue_adding)
            ],
            states={
                LOGIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, login)],
                PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, password)],
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
                ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
                CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, description)],
                HISTORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, history)],
                LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, location)],
                PHOTOS: [MessageHandler(filters.PHOTO, photos)],
                IMAGE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, image_name)]
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                CommandHandler('logout', logout)
            ],
            allow_reentry=True
        )

        application.add_handler(conv_handler)
        application.add_handler(CommandHandler("logout", logout))

        application.add_handler(MessageHandler(
            filters.Regex(r'^–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ$'),
            continue_adding
        ))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            bootstrap_retries=5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"Error running bot: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    main()